<?php
/**
 * Plugin Name: Custom Yoast Schema for Authors
 * Description: Replaces the default Yoast author schema with authors from an ACF repeater field.
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

add_filter( 'yoast_seo_development_mode', '__return_true' );


/**
 * Enable Article schema for the shorthand_story post type.
 * By default, Yoast only outputs Article schema for standard posts.
 *
 * @param array $post_types The current list of post types that get Article schema.
 * @return array The modified list of post types.
 */
function caes_add_article_schema_to_custom_post_types( $post_types ) {
    $post_types[] = 'shorthand_story';
    return $post_types;
}

add_filter( 'wpseo_schema_article_post_types', 'caes_add_article_schema_to_custom_post_types' );


/**
 * Ensure the shorthand_story post type supports authors.
 * This is required for Yoast to output Article schema.
 */
function caes_add_author_support_to_custom_post_types() {
    add_post_type_support( 'shorthand_story', 'author' );
}

add_action( 'init', 'caes_add_author_support_to_custom_post_types' );


/**
 * Modifies the Yoast SEO schema to include multiple authors from the 'authors' ACF repeater field.
 * This function handles both WordPress Users and Custom manual entries.
 *
 * @param array $data The Schema Article data generated by Yoast.
 * @return array The modified Schema Article data.
 */
function caes_add_acf_authors_to_yoast_schema( $data ) {
    
    // Get the 'authors' repeater field for the current post.
    $authors = get_field('authors');

    // Proceed only if the repeater field has data.
    if ( $authors ) {
        $authors_schema = []; // Initialize an empty array for our author schema objects.

        // Loop through each row of the repeater.
        foreach ( $authors as $author_row ) {
            
            $entry_type = $author_row['type'] ?? '';
            $person_schema = null;

            // Check if it's a 'Custom' (manual) entry.
            if ( $entry_type === 'Custom' ) {
                $custom_user = $author_row['custom_user'] ?? $author_row['custom'] ?? [];
                $first_name = $custom_user['first_name'] ?? '';
                $last_name = $custom_user['last_name'] ?? '';
                $full_name = trim("$first_name $last_name");

                if ( ! empty($full_name) ) {
                    // Build a Person schema object WITHOUT a URL.
                    $person_schema = [
                        '@type' => 'Person',
                        'name'  => $full_name,
                    ];
                }
            } 
            // Otherwise, handle it as a WordPress User entry.
            else {
                $user_data = $author_row['user'] ?? null;
                $user_id = is_array($user_data) ? ($user_data['ID'] ?? null) : $user_data;
                
                if ( $user_id && is_numeric($user_id) ) {
                    $display_name = get_the_author_meta('display_name', $user_id);
                    $profile_url = get_author_posts_url($user_id);

                    // Build a Person schema object WITH a URL.
                    $person_schema = [
                        '@type' => 'Person',
                        'name'  => $display_name,
                        'url'   => $profile_url,
                    ];
                }
            }

            // If a valid person schema was created, add it to our array.
            if ($person_schema) {
                $authors_schema[] = $person_schema;
            }
        }

        // If we have authors, replace the default 'author' data with our new array.
        if ( ! empty($authors_schema) ) {
            $data['author'] = $authors_schema;
        }
    }

    return $data;
}

add_filter( 'wpseo_schema_article', 'caes_add_acf_authors_to_yoast_schema', 11, 1 );


/**
 * Remove the default Author/Person piece from the schema graph when we have custom ACF authors.
 * This is the proper Yoast way to prevent schema pieces from being output.
 *
 * @param array $pieces The array of schema piece generators.
 * @param \Yoast\WP\SEO\Context\Meta_Tags_Context $context The context object.
 * @return array The filtered array of schema pieces.
 */
function caes_remove_default_author_from_graph( $pieces, $context ) {
    
    // Only filter on singular posts/pages
    if ( ! is_singular() ) {
        return $pieces;
    }
    
    // Check if we have custom ACF authors
    $custom_authors = get_field('authors');
    if ( empty($custom_authors) ) {
        return $pieces;
    }
    
    // Remove the Author piece (which generates the Person schema for the post author)
    return array_filter( $pieces, function( $piece ) {
        // Remove if it's an Author piece
        return ! $piece instanceof \Yoast\WP\SEO\Generators\Schema\Author;
    });
}

add_filter( 'wpseo_schema_graph_pieces', 'caes_remove_default_author_from_graph', 11, 2 );


/**
 * Replace the default author meta tag with multiple authors from ACF.
 * This changes the <meta name="author" content="..."> tag in the HTML head.
 *
 * @param string $author The author name from Yoast.
 * @return string The modified author name(s).
 */
function caes_change_meta_author_tag( $author ) {
    
    // Only modify on singular posts
    if ( ! is_singular() ) {
        return $author;
    }
    
    // Get the ACF authors
    $authors = get_field('authors');
    
    // If no ACF authors, return the default
    if ( empty($authors) ) {
        return $author;
    }
    
    // Build an array of author names
    $author_names = [];
    
    foreach ( $authors as $author_row ) {
        $entry_type = $author_row['type'] ?? '';
        
        // Handle Custom entries
        if ( $entry_type === 'Custom' ) {
            $custom_user = $author_row['custom_user'] ?? $author_row['custom'] ?? [];
            $first_name = $custom_user['first_name'] ?? '';
            $last_name = $custom_user['last_name'] ?? '';
            $full_name = trim("$first_name $last_name");
            
            if ( ! empty($full_name) ) {
                $author_names[] = $full_name;
            }
        } 
        // Handle WordPress User entries
        else {
            $user_data = $author_row['user'] ?? null;
            $user_id = is_array($user_data) ? ($user_data['ID'] ?? null) : $user_data;
            
            if ( $user_id && is_numeric($user_id) ) {
                $display_name = get_the_author_meta('display_name', $user_id);
                if ( ! empty($display_name) ) {
                    $author_names[] = $display_name;
                }
            }
        }
    }
    
    // Join multiple authors with commas
    if ( ! empty($author_names) ) {
        return implode(', ', $author_names);
    }
    
    return $author;
}

add_filter( 'wpseo_meta_author', 'caes_change_meta_author_tag', 10, 1 );