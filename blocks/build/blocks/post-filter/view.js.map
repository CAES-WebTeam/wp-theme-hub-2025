{"version":3,"file":"post-filter/view.js","mappings":"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","sources":["webpack://theme-blocks/./src/post-filter/view.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', function () {\n    const categorySelect = document.getElementById('category-select');\n    const queryLoopContainer = document.querySelector('.wp-block-query');\n    const postTemplateContainer = queryLoopContainer.querySelector('.wp-block-post-template');\n\n    // Store the original post template structure and the initial number of items\n    let postTemplateClone = postTemplateContainer.children[0].cloneNode(true);\n    const initialPostCount = postTemplateContainer.children.length;\n\n    if (categorySelect && queryLoopContainer) {\n        categorySelect.addEventListener('change', function () {\n            const selectedCategory = categorySelect.value;\n            let apiUrl = '/wp-json/wp/v2/posts?per_page=10&_embed=wp:featuredmedia,wp:term';\n\n            // Add category filter if a category is selected\n            if (selectedCategory) {\n                apiUrl += `&categories=${selectedCategory}`;\n                console.log(apiUrl);\n            }\n\n            // Fetch posts from the REST API\n            fetch(apiUrl, {\n                method: 'GET',\n            })\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(`Error: ${response.statusText}`);\n                }\n                return response.json();\n            })\n            .then(posts => {\n                // Clear all post items\n                postTemplateContainer.innerHTML = '';\n\n                // Determine the number of posts to display based on fetched posts and the initial post count\n                const postCount = Math.max(posts.length, initialPostCount);\n\n                // Loop through the number of posts we need to display\n                for (let i = 0; i < postCount; i++) {\n                    let postItem;\n\n                    // If a post exists for this index, use its data\n                    if (posts[i]) {\n                        postItem = postTemplateClone.cloneNode(true);  // Clone for each post\n\n                        const post = posts[i];\n\n                        // Find the title, featured image, excerpt, and categories within the current post item\n                        const titleElement = postItem.querySelector('.wp-block-post-title a');\n                        const featuredImageElement = postItem.querySelector('.wp-block-post-featured-image img');\n                        const excerptElement = postItem.querySelector('.wp-block-post-excerpt p');\n                        const categoriesElement = postItem.querySelector('.wp-block-post-terms');\n\n                        // Update the title\n                        if (titleElement) {\n                            titleElement.textContent = post.title.rendered;\n                            titleElement.href = post.link;\n                        }\n\n                        // Update the featured image if it exists\n                        if (featuredImageElement && post._embedded && post._embedded['wp:featuredmedia'] && post._embedded['wp:featuredmedia'][0].source_url) {\n                            const featuredImage = post._embedded['wp:featuredmedia'][0].source_url;\n                            featuredImageElement.src = featuredImage;\n                            console.log(featuredImage);\n                        } else {\n                            // If no featured image exists, optionally hide the image element\n                            if (featuredImageElement) {\n                                featuredImageElement.style.display = 'none';\n                            }\n                        }\n\n                        // Update the excerpt\n                        if (excerptElement) {\n                            excerptElement.innerHTML = post.excerpt.rendered;\n                        }\n\n                        // Update categories\n                        if (categoriesElement && post._embedded && post._embedded['wp:term']) {\n                            const categories = post._embedded['wp:term'][0]; // Categories are at index 0\n                            categoriesElement.innerHTML = '';\n\n                            categories.forEach(category => {\n                                const categoryLink = document.createElement('a');\n                                categoryLink.href = `/category/${category.slug}`;\n                                categoryLink.textContent = category.name;\n                                categoriesElement.appendChild(categoryLink);\n                                categoriesElement.innerHTML += ', ';\n                            });\n\n                            categoriesElement.innerHTML = categoriesElement.innerHTML.slice(0, -2);\n                        }\n                    } else {\n                        // If no post exists for this index, append an empty template item\n                        postItem = postTemplateClone.cloneNode(true);\n                        postItem.style.display = 'none'; // Hide the extra template item\n                    }\n\n                    postTemplateContainer.appendChild(postItem);\n                }\n            })\n            .catch(error => {\n                console.error('Failed to fetch posts:', error);\n            });\n        });\n    }\n});\n"],"names":["document","addEventListener","categorySelect","getElementById","queryLoopContainer","querySelector","postTemplateContainer","postTemplateClone","children","cloneNode","initialPostCount","length","selectedCategory","value","apiUrl","console","log","fetch","method","then","response","ok","Error","statusText","json","posts","innerHTML","postCount","Math","max","i","postItem","post","titleElement","featuredImageElement","excerptElement","categoriesElement","textContent","title","rendered","href","link","_embedded","source_url","featuredImage","src","style","display","excerpt","categories","forEach","category","categoryLink","createElement","slug","name","appendChild","slice","catch","error"],"sourceRoot":""}